"use client"
import { useState } from 'react';
import { MotionDiv, MotionH2, MotionP, MotionButton } from '../components/common/MotionWrapper';

// Mock insurance data
const mockInsurance = [
  {
    id: 1,
    title: "B·∫£o hi·ªÉm du l·ªãch c∆° b·∫£n",
    subtitle: "B·∫£o v·ªá to√†n di·ªán cho chuy·∫øn du l·ªãch c·ªßa b·∫°n",
    image: "https://images.unsplash.com/photo-1552733407-5d5c46c3bb3b?w=800&h=600&fit=crop",
    type: "C∆° b·∫£n",
    price: 150000,
    duration: "1-30 ng√†y",
    coverage: "50 tri·ªáu VND",
    rating: 4.5,
    reviewCount: 892,
    features: [
      "B·∫£o hi·ªÉm y t·∫ø kh·∫©n c·∫•p",
      "B·∫£o hi·ªÉm tai n·∫°n",
      "B·∫£o hi·ªÉm h√†nh l√Ω",
      "H·ªó tr·ª£ kh·∫©n c·∫•p 24/7",
      "B·ªìi th∆∞·ªùng chuy·∫øn bay b·ªã h·ªßy",
      "B·∫£o hi·ªÉm tr√°ch nhi·ªám d√¢n s·ª±"
    ],
    exclusions: [
      "Th·ªÉ thao m·∫°o hi·ªÉm",
      "B·ªánh c√≥ s·∫µn",
      "Chi·∫øn tranh, b·∫°o ƒë·ªông"
    ],
    claimProcess: "ƒê∆°n gi·∫£n, nhanh ch√≥ng trong 7-14 ng√†y"
  },
  {
    id: 2,
    title: "B·∫£o hi·ªÉm du l·ªãch cao c·∫•p",
    subtitle: "B·∫£o v·ªá to√†n di·ªán v·ªõi m·ª©c b·ªìi th∆∞·ªùng cao",
    image: "https://images.unsplash.com/photo-1436491865332-7a61a109cc05?w=800&h=600&fit=crop",
    type: "Cao c·∫•p",
    price: 350000,
    duration: "1-90 ng√†y",
    coverage: "100 tri·ªáu VND",
    rating: 4.8,
    reviewCount: 567,
    features: [
      "T·∫•t c·∫£ quy·ªÅn l·ª£i c∆° b·∫£n",
      "B·∫£o hi·ªÉm th·ªÉ thao m·∫°o hi·ªÉm",
      "B·∫£o hi·ªÉm xe thu√™",
      "B·∫£o hi·ªÉm thi·∫øt b·ªã ƒëi·ªán t·ª≠",
      "B·∫£o hi·ªÉm b·ªánh c√≥ s·∫µn",
      "D·ªãch v·ª• VIP 24/7"
    ],
    exclusions: [
      "Chi·∫øn tranh, b·∫°o ƒë·ªông",
      "H√†nh vi vi ph·∫°m ph√°p lu·∫≠t"
    ],
    claimProcess: "∆Øu ti√™n x·ª≠ l√Ω trong 3-7 ng√†y"
  },
  {
    id: 3,
    title: "B·∫£o hi·ªÉm du l·ªãch gia ƒë√¨nh",
    subtitle: "B·∫£o v·ªá c·∫£ gia ƒë√¨nh v·ªõi gi√° ∆∞u ƒë√£i",
    image: "https://images.unsplash.com/photo-1552733407-5d5c46c3bb3b?w=800&h=600&fit=crop",
    type: "Gia ƒë√¨nh",
    price: 500000,
    duration: "1-30 ng√†y",
    coverage: "200 tri·ªáu VND",
    rating: 4.7,
    reviewCount: 423,
    features: [
      "B·∫£o hi·ªÉm cho t·ªëi ƒëa 6 th√†nh vi√™n",
      "B·∫£o hi·ªÉm y t·∫ø to√†n di·ªán",
      "B·∫£o hi·ªÉm tai n·∫°n",
      "B·∫£o hi·ªÉm h√†nh l√Ω",
      "H·ªó tr·ª£ kh·∫©n c·∫•p 24/7",
      "B·∫£o hi·ªÉm tr√°ch nhi·ªám d√¢n s·ª±"
    ],
    exclusions: [
      "Th·ªÉ thao m·∫°o hi·ªÉm",
      "B·ªánh c√≥ s·∫µn",
      "Chi·∫øn tranh, b·∫°o ƒë·ªông"
    ],
    claimProcess: "X·ª≠ l√Ω nhanh ch√≥ng trong 5-10 ng√†y"
  }
];

export default function InsurancePage() {
  const [selectedType, setSelectedType] = useState('all');
  const [selectedDuration, setSelectedDuration] = useState('all');
  const [priceRange, setPriceRange] = useState('all');

  const types = ['all', 'C∆° b·∫£n', 'Cao c·∫•p', 'Gia ƒë√¨nh', 'Doanh nghi·ªáp'];
  const durations = ['all', '1-7 ng√†y', '8-15 ng√†y', '16-30 ng√†y', '31-90 ng√†y', '90+ ng√†y'];
  const priceRanges = [
    { value: 'all', label: 'T·∫•t c·∫£ gi√°' },
    { value: 'budget', label: 'D∆∞·ªõi 200k' },
    { value: 'mid', label: '200k - 500k' },
    { value: 'high', label: '500k - 1M' },
    { value: 'luxury', label: 'Tr√™n 1M' }
  ];

  const filteredInsurance = mockInsurance.filter(insurance => {
    if (selectedType !== 'all' && insurance.type !== selectedType) return false;
    if (priceRange !== 'all') {
      const price = insurance.price;
      switch (priceRange) {
        case 'budget': return price < 200000;
        case 'mid': return price >= 200000 && price <= 500000;
        case 'high': return price > 500000 && price <= 1000000;
        case 'luxury': return price > 1000000;
        default: return true;
      }
    }
    return true;
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-indigo-50">
      {/* Hero Section */}
      <section className="relative py-20 bg-gradient-to-r from-purple-600 to-indigo-600 text-white">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl lg:text-6xl font-bold mb-6">
            B·∫£o hi·ªÉm du l·ªãch
          </h1>
          <MotionP
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
            className="text-xl lg:text-2xl text-purple-100 max-w-3xl mx-auto"
          >
            B·∫£o v·ªá chuy·∫øn du l·ªãch c·ªßa b·∫°n v·ªõi c√°c g√≥i b·∫£o hi·ªÉm to√†n di·ªán, an t√¢m kh√°m ph√° th·∫ø gi·ªõi
          </MotionP>
        </div>
      </section>

      {/* Why Insurance Section */}
      <section className="py-16 bg-white">
        <div className="container mx-auto px-4">
          <MotionH2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl font-bold text-gray-900 mb-12 text-center"
          >
            T·∫°i sao c·∫ßn b·∫£o hi·ªÉm du l·ªãch?
          </MotionH2>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {[
              {
                icon: "üõ°Ô∏è",
                title: "B·∫£o v·ªá t√†i ch√≠nh",
                description: "B·ªìi th∆∞·ªùng chi ph√≠ y t·∫ø, tai n·∫°n v√† c√°c r·ªßi ro kh√¥ng mong mu·ªën"
              },
              {
                icon: "üö®",
                title: "H·ªó tr·ª£ kh·∫©n c·∫•p 24/7",
                description: "ƒê·ªôi ng≈© h·ªó tr·ª£ chuy√™n nghi·ªáp s·∫µn s√†ng gi√∫p ƒë·ª° m·ªçi l√∫c"
              },
              {
                icon: "‚úàÔ∏è",
                title: "B·∫£o hi·ªÉm chuy·∫øn bay",
                description: "B·ªìi th∆∞·ªùng khi chuy·∫øn bay b·ªã h·ªßy, tr·ªÖ ho·∫∑c m·∫•t h√†nh l√Ω"
              }
            ].map((item, index) => (
              <MotionDiv
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                className="text-center p-6"
              >
                <div className="text-6xl mb-4">{item.icon}</div>
                <h3 className="text-xl font-bold text-gray-900 mb-3">{item.title}</h3>
                <p className="text-gray-600">{item.description}</p>
              </MotionDiv>
            ))}
          </div>
        </div>
      </section>

      {/* Filters Section */}
      <section className="py-8 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="bg-white rounded-2xl shadow-xl p-6 lg:p-8">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Type Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i b·∫£o hi·ªÉm</label>
                <select
                  value={selectedType}
                  onChange={(e) => setSelectedType(e.target.value)}
                  className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  {types.map(type => (
                    <option key={type} value={type}>
                      {type === 'all' ? 'T·∫•t c·∫£ lo·∫°i' : type}
                    </option>
                  ))}
                </select>
              </div>

              {/* Duration Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Th·ªùi h·∫°n</label>
                <select
                  value={selectedDuration}
                  onChange={(e) => setSelectedDuration(e.target.value)}
                  className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  {durations.map(duration => (
                    <option key={duration} value={duration}>
                      {duration === 'all' ? 'T·∫•t c·∫£ th·ªùi h·∫°n' : duration}
                    </option>
                  ))}
                </select>
              </div>

              {/* Price Range Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Kho·∫£ng gi√°</label>
                <select
                  value={priceRange}
                  onChange={(e) => setPriceRange(e.target.value)}
                  className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  {priceRanges.map(range => (
                    <option key={range.value} value={range.value}>
                      {range.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Search Button */}
              <div className="flex items-end">
                <MotionButton
                  className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition-all duration-300"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  üîç T√¨m ki·∫øm
                </MotionButton>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Insurance Plans Grid */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <MotionH2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl font-bold text-gray-900 mb-12 text-center"
          >
            {filteredInsurance.length} g√≥i b·∫£o hi·ªÉm ƒë∆∞·ª£c t√¨m th·∫•y
          </MotionH2>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {filteredInsurance.map((plan, index) => (
              <MotionDiv
                key={plan.id}
                initial={{ opacity: 0, y: 40 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.7, delay: index * 0.1 }}
                className="bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 hover:border-purple-200 transform hover:-translate-y-2"
              >
                {/* Plan Image */}
                <div className="relative h-48 overflow-hidden">
                  <img 
                    src={plan.image} 
                    alt={plan.title}
                    className="w-full h-full object-cover hover:scale-110 transition-transform duration-700"
                  />
                  <div className="absolute top-4 left-4 bg-purple-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                    {plan.type}
                  </div>
                  <div className="absolute bottom-4 right-4 bg-white/90 backdrop-blur-sm px-3 py-2 rounded-lg">
                    <div className="flex items-center space-x-1">
                      <span className="text-yellow-400">‚≠ê</span>
                      <span className="font-bold text-gray-900">{plan.rating}</span>
                      <span className="text-gray-600 text-sm">({plan.reviewCount.toLocaleString()})</span>
                    </div>
                  </div>
                </div>

                {/* Plan Info */}
                <div className="p-6">
                  <h3 className="text-xl font-bold text-gray-900 mb-2">
                    {plan.title}
                  </h3>
                  <p className="text-gray-600 mb-4">
                    {plan.subtitle}
                  </p>

                  {/* Quick Info */}
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    <div className="bg-purple-50 p-3 rounded-xl">
                      <div className="text-purple-600 text-sm font-medium mb-1">Th·ªùi h·∫°n</div>
                      <div className="text-gray-800 font-semibold">{plan.duration}</div>
                    </div>
                    <div className="bg-indigo-50 p-3 rounded-xl">
                      <div className="text-indigo-600 text-sm font-medium mb-1">M·ª©c b·ªìi th∆∞·ªùng</div>
                      <div className="text-gray-800 font-semibold">{plan.coverage}</div>
                    </div>
                  </div>

                  {/* Price */}
                  <div className="mb-6 text-center">
                    <div className="text-3xl font-bold text-purple-600 mb-2">
                      {plan.price.toLocaleString()}ƒë
                    </div>
                    <span className="text-sm text-gray-600">/ng∆∞·ªùi</span>
                  </div>

                  {/* Features */}
                  <div className="mb-6">
                    <h4 className="font-semibold text-gray-900 mb-3">Quy·ªÅn l·ª£i bao g·ªìm</h4>
                    <div className="space-y-2">
                      {plan.features.slice(0, 4).map((feature, idx) => (
                        <div key={idx} className="flex items-center space-x-2 text-sm text-gray-600">
                          <span className="text-green-500">‚úì</span>
                          <span>{feature}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Claim Process */}
                  <div className="mb-6 p-3 bg-blue-50 rounded-lg">
                    <div className="text-blue-600 text-sm font-medium mb-1">Quy tr√¨nh b·ªìi th∆∞·ªùng</div>
                    <div className="text-gray-800 text-sm">{plan.claimProcess}</div>
                  </div>

                  {/* CTA Buttons */}
                  <div className="space-y-3">
                    <MotionButton
                      className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-purple-700 hover:to-indigo-700 transition-all duration-300"
                      whileHover={{ y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      Mua b·∫£o hi·ªÉm
                    </MotionButton>
                    <MotionButton
                      className="w-full px-6 py-3 border-2 border-purple-600 text-purple-600 rounded-xl font-semibold hover:bg-purple-600 hover:text-white transition-all duration-300"
                      whileHover={{ y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      Xem chi ti·∫øt
                    </MotionButton>
                  </div>
                </div>
              </MotionDiv>
            ))}
          </div>

          {/* No Results */}
          {filteredInsurance.length === 0 && (
            <MotionDiv
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center py-16"
            >
              <div className="text-6xl mb-4">üõ°Ô∏è</div>
              <h3 className="text-2xl font-bold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y g√≥i b·∫£o hi·ªÉm</h3>
              <p className="text-gray-600 mb-6">H√£y th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ƒë·ªÉ t√¨m ki·∫øm g√≥i b·∫£o hi·ªÉm ph√π h·ª£p</p>
              <MotionButton
                onClick={() => {
                  setSelectedType('all');
                  setSelectedDuration('all');
                  setPriceRange('all');
                }}
                className="bg-purple-600 text-white px-8 py-3 rounded-xl font-semibold hover:bg-purple-700 transition-colors"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.98 }}
              >
                X√≥a b·ªô l·ªçc
              </MotionButton>
            </MotionDiv>
          )}
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <MotionH2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-3xl font-bold text-gray-900 mb-12 text-center"
          >
            C√¢u h·ªèi th∆∞·ªùng g·∫∑p
          </MotionH2>

          <div className="max-w-4xl mx-auto space-y-6">
            {[
              {
                question: "B·∫£o hi·ªÉm du l·ªãch c√≥ b·∫Øt bu·ªôc kh√¥ng?",
                answer: "B·∫£o hi·ªÉm du l·ªãch kh√¥ng b·∫Øt bu·ªôc nh∆∞ng r·∫•t c·∫ßn thi·∫øt ƒë·ªÉ b·∫£o v·ªá b·∫°n kh·ªèi c√°c r·ªßi ro kh√¥ng mong mu·ªën."
              },
              {
                question: "T√¥i c√≥ th·ªÉ mua b·∫£o hi·ªÉm khi ƒë√£ ·ªü n∆∞·ªõc ngo√†i kh√¥ng?",
                answer: "Kh√¥ng, b·∫°n c·∫ßn mua b·∫£o hi·ªÉm tr∆∞·ªõc khi kh·ªüi h√†nh ƒë·ªÉ ƒë∆∞·ª£c b·∫£o v·ªá to√†n di·ªán."
              },
              {
                question: "Quy tr√¨nh b·ªìi th∆∞·ªùng c√≥ ph·ª©c t·∫°p kh√¥ng?",
                answer: "Kh√¥ng, quy tr√¨nh r·∫•t ƒë∆°n gi·∫£n. Ch·ªâ c·∫ßn g·ªçi hotline v√† cung c·∫•p gi·∫•y t·ªù c·∫ßn thi·∫øt."
              }
            ].map((faq, index) => (
              <MotionDiv
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                className="bg-white rounded-xl p-6 shadow-lg"
              >
                <h3 className="text-lg font-semibold text-gray-900 mb-2">{faq.question}</h3>
                <p className="text-gray-600">{faq.answer}</p>
              </MotionDiv>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
} 